#!/bin/zsh

# wordle_solver.part1.v0.4

# Wordle solver script by gsb

# Developed on macos 16.1 (21.6.0 Darwin Kernel Version 21.6.0: root:xnu-8020.240.7~1/RELEASE_X86_64)
# and zsh (zsh 5.8.1 (x86_64-apple-darwin21.0)

if [[ "$VERBOSITY" -eq 2 ]]; then
  print "wordle_solver.part1.v0.4"
  print
fi

# Part 1: secondary loop to eliminate words without perfectly matched
# letter(s) in correct position

  VALID=0
  while [[ "$VALID" -eq 0 ]]; do
    print -n "Did any letters match in the correct position (green square)? (y/n)"
    read -r RESP11
    if [[ "$RESP11" = "y" ]]; then
      print -n "Enter letter(s) which exactly matched (in any order):"
      read -r CORRECT
      if [[ "$VERBOSITY" -eq 2 ]]; then
        print "You entered \"$CORRECT\"."
      fi

      # Check if any letters in $CORRECT do not appear in GUESS
      if [[ "$VERBOSITY" -eq 2 ]]; then
        print "Checking for invalid letters in $CORRECT"
      fi
      LEN="${#CORRECT}"
      if [[ "$VERBOSITY" -eq 2 ]]; then
        print "Number of letters correctly matching is $LEN"
      fi

      # Loop through matching letters
      for j in {1..$LEN}; do
        OFFSET=$(( $j-1 ))
        if [[ "$VERBOSITY" -eq 2 ]]; then
          print "\$OFFSET is $OFFSET"
        fi
        LETTER=${CORRECT:$OFFSET:1}
        if [[ "$VERBOSITY" -eq 2 ]]; then
          print "Checking letter $j: \$LETTER is $LETTER"
        fi
        COUNT=$( grep -o "$LETTER" <<<"${GUESS[$i]}" | wc -l )
        COUNT=${COUNT// }
        if [[ "$VERBOSITY" -eq 2 ]]; then
          print "Letter $LETTER appears in ${GUESS[$i]} $COUNT times"
          #print "\$? is $?"
        fi

        if [[ "$COUNT" -eq 0 ]]; then
          print "Invalid entry. Letter $LETTER does not appear in ${GUESS[$i]}"
          print "Try again"
          VALID=0
          break
        else
          VALID=1
        fi
      done

    elif [[ "$RESP11" = "n" ]]; then
      if [[ "$VERBOSITY" -ge 1 ]]; then
        print
        print "No matches in the correct position"
      fi
      CORRECT=""
      print
      VALID=1
    else
      print "Error - incorrect input."
    fi
  done

  # Find string length of $CORRECT
  LEN="${#CORRECT}"
  if [[ "$VERBOSITY" -eq 2  ]]; then
    print "Number of letters exactly matched is $LEN"
    print
  fi

  # Check if $LEN is 1 or greater and loop only if there are exactly matching letters
  if [[ "$LEN" -ge 1 ]]; then
  # Loop through matching letters 
    for j in {1..$LEN}; do

      # First, determine the current letter 
      OFFSET=$(( $j-1 ))

      if [[ "$VERBOSITY" -eq 2 ]]; then
        print "\$OFFSET is $OFFSET"
      fi

      MATCH=${CORRECT:$OFFSET:1}

      if [[ "$VERBOSITY" -eq 2 ]]; then
        print "\$MATCH is $MATCH"
      fi

      # Check if there are duplicate letters in the guess ${GUESS[i]}
      COUNT=$( grep -o "$MATCH" <<<"${GUESS[i]}" | wc -l )
      #print "\$? is $?"
        if [[ $? -ne 0 ]]; then
          print "Error in grep - \$?=$?"
        fi
      COUNT=${COUNT// }
      if [[ "$VERBOSITY" -eq 2 ]]; then
        print "The letter $MATCH occurs $COUNT times in ${GUESS[$i]}."
      fi

      # Deal with $COUNT
        if [[ "$COUNT" -eq 0 ]]; then
          print "ERROR - $MATCH does not actually exist in ${GUESS[i]}"
          exit 1

        elif [[ "$COUNT" -gt 3 ]]; then
          print "What? More than 3 $MATCH's! That's an error."
          exit 2

        elif [[ "$COUNT" -eq 1 ]]; then
          if [[ "$VERBOSITY" -eq 2 ]]; then
            print "$MATCH occurs once in ${GUESS[i]}"
          fi
          # Find position of first matched letter in the GUESS[i].
          BEGIN=${GUESS[$i]/$MATCH*/}
          if [[ "$VERBOSITY" -eq 2 ]]; then
            print "\$BEGIN is $BEGIN"
          fi

          INDEX=${#BEGIN}
          if [[ "$VERBOSITY" -eq 2 ]]; then
            print "Index of $MATCH in ${GUESS[$i]} is $INDEX"
          fi

          # Check if $MATCH is already in $ANSWER in position $INDEX
            if [[ "${ANSWER[$(($INDEX+1))]}" = "$MATCH" ]]; then
              print "$MATCH is already assigned to this position in \$ANSWER"
              print
          else
            # If not, add letter to ANSWER
            ANSWER="${ANSWER:0:$INDEX}""$MATCH""${ANSWER:$(( $INDEX+1 ))}"
            if [[ "$VERBOSITY" -eq 2 ]]; then
              print "\$ANSWER is now $ANSWER"
            fi
          fi


        else
          # $COUNT is 2 or 3
          if [[ "$COUNT" -eq 2 ]]; then
            print "$MATCH occurs twice in ${GUESS[i]}"
          fi

          if [[ "$COUNT" -eq 3 ]]; then
            print "$MATCH occurs three times in ${GUESS[i]}"
          fi

          # Find the positions of the occurrences of $MATCH
          k=0
          # Loop through letters in guess to find matches
          for l in {1..5}; do
            if [[ "$VERBOSITY" -eq 2 ]]; then
              print "Letter $l: ${GUESS[$i][$l]}"
            fi

            if [[ "${GUESS[$i][$l]}" = "$MATCH" ]]; then
              k=$(($k+1))
              print "$MATCH is found in position $l of guess"

              # Check if $MATCH is already in $ANSWER in that position
              if [[ "$VERBOSITY" -eq 2 ]]; then
                print "Letter in position $l of ANSWER is ${ANSWER[$l]}"
              fi
              if [[ "${ANSWER[$l]}" = "$MATCH" ]]; then
                # If so, alert, do not change $ANSWER, and move to next occurrence of $MATCH
                if [[ "$VERBOSITY" -ge 1 ]]; then
                  print "$MATCH is already assigned to this position in \$ANSWER"
                  print "No change to \$ANSWER"
                fi
                print

              else
                print -n "Is this occurrence of $MATCH an exact match (green square)? (y/n)"
                read -r RESP
                if [[ "$RESP" = "y" ]]; then
                  # Add letter to $ANSWER
                  ANSWER="${ANSWER:0:$(($l-1))}""$MATCH""${ANSWER:$l}"
                  if [[ "$VERBOSITY" -ge 1 ]]; then
                    print "\$ANSWER is now $ANSWER"
                  fi
                elif [[ "$RESP" = "n" ]]; then
                  print "Not an exact match - no change in \$ANSWER"
                  print
                else
                  print "Error - incorrect input. Exiting"
                  exit 3
                fi

              fi

            fi

          done
          # End of loop through letters in guess to find matches

        print

        fi

      print

      if [[ "$VERBOSITY" -eq 2 ]]; then
        print "Finding words that match pattern $ANSWER"
      fi

      # Now select only those words which match pattern
      grep --regexp="$ANSWER" list.tmp > list_$i.txt

      # Check for grep errors
      if [[ $? -ne "0" ]]; then
        if [[ "$VERBOSITY" -eq 2 ]]; then
          print -n "Error in grep line 224"
        fi
        print "No remaining words matching "\""$ANSWER"\""."
        print "Likely an error in entry"
        exit 4
      fi

      # If hard mode is enabled, use ANSWER to prune current_valid_guess_list.tmp
      if [[ "$HARD" -eq 1 ]]; then
        if [[ "$VERBOSITY" -eq 2 ]]; then
          print "Removing valid guesses which do not match ANSWER"
        fi
        grep --regexp="$ANSWER" current_valid_guess_list.tmp > corrected_guess_list.tmp

        # Check for grep errors
        if [[ $? -ne "0" ]]; then
          print -n "Error in grep of current_valid_guess_list.tmp. Exiting."
          exit 5
        fi

        # Display result for debug
        if [[ "$VERBOSITY" -eq 2 ]]; then
          CURRENT=$(wc -l < current_valid_guess_list.tmp)
          CURRENT=${CURRENT// }
          CNT=$(wc -l < corrected_guess_list.tmp)
          CNT=${CNT// }
          print "$CURRENT valid guesses reduced to $CNT valid quesses in part 1"
        fi
        cat corrected_guess_list.tmp > current_valid_guess_list.tmp
      fi

      # Tabulate and display results after part 1
      PART1=$(wc -l < list.tmp)
      PART1=${PART1// }
      CNT=$(wc -l < list_$i.txt)
      CNT=${CNT// }
      DISCARD=$(( $PART1-$CNT ))
      if [[ "$i" -gt 1 ]]; then
        print "Before solving this guess, $PART1 words remained out of an initial $TOTAL words."
      fi

      print -n "After matching for words containing $MATCH"
      if [[ "$VERBOSITY" -ne 2 ]]; then
        print ","
      fi
      if [[ "$VERBOSITY" -eq 2 ]]; then
        print " in pattern $ANSWER,"
      fi


      print "$DISCARD words eliminated; $CNT words remaining."
      if [[ "$VERBOSITY" -eq 2 ]]; then
        print -n "See list of remaining words? (y/n)"
        read -r RESP6
          if [[ "$RESP6" = "y" ]]; then
            cat list_$i.txt
          fi
      fi

      # Write list_$i.txt to list.tmp for processing in next step
      cat list_$i.txt > list.tmp

      # If there are 0 words remaining
      if [[ "$CNT" -eq 0 ]]; then
        print
        print "Zero words remaining - Error."
        print
        exit 6
      fi


      # If there is only one word remaining
      if [[ "$CNT" -eq 1 ]]; then
        print
        print "Wordle is solved. The answer is:"
        print
        ANSWER=$( cat list_$i.txt )
        print $ANSWER
        print

        print -n "Update unused_wordle_answers.txt? (y/n)"
        read -r RESP10
          if [[ "$RESP10" = "y" ]]; then
             . ./update_unused_wordle_answers.v0.4
          fi
        exit 0
      fi

    done
    # End of loop through matching letters

    if [[ "$VERBOSITY" -eq 2 ]]; then
      print "Finished checking perfectly matched letters."
    fi

  else
    print "No perfectly matched letters."
    print
  fi

  if [[ "$VERBOSITY" -eq 2 ]]; then
    print "Returning execution to wordle_solver.master.v0.4"
  fi

  return

