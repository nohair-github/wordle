#!/bin/zsh

# wordle_solver.part2.dev
# developmental version of wordle_solver subscript
# Wordle solver script by gsb

  if [[ "$VERBOSITY" -eq 2 ]]; then
    print "wordle_solver.part2.dev"
  fi
  print

# Part #2: secondary loop to eliminate words without perfectly matched letter(s) in correct position

# Determine number of words remaining
  PART2=$(wc -l < list.tmp)
  PART2=${PART2// }

# Input letters and check validity
  VALID=0
  while [[ "$VALID" -eq 0 ]]; do
    print -n "Did any letters that match but in the wrong position (yellow square)? (y/n)"
    read -r RESP

    if [[ "$RESP" = "n" ]]; then
      print
      print "No partially matched letters"
      LET=""
      print
      return

    elif [[ "$RESP" = "y" ]]; then
      print -n "Enter letters which partially matched (yellow square) in lower case and in any order:"
      read -r LET

      # Check if number of letters in $LET is invalid (<1 or >5)
      if [[ "${#LET}" -lt 1 ]]; then
        print "No partially matched letters entered to process."
        print "Try again"

      elif [[ "${#LET}" -gt 5 ]]; then
        print "\$LET is invalid (>5 letters)"
        print "Try again"

      else
        # Check if any letters in $LET do not appear in GUESS
        if [[ "$VERBOSITY" -eq 2 ]]; then
          print "Checking for invalid letters in $LET"
        fi
        LEN="${#LET}"
        if [[ "$VERBOSITY" -eq 2 ]]; then
          print "Number of letters partially matching is $LEN"
        fi

        # Loop through partially matching letters to check if they are actually in GUESS
        for j in {1..$LEN}; do
          OFFSET=$(( $j-1 ))
          if [[ "$VERBOSITY" -eq 2 ]]; then
            print "\$OFFSET is $OFFSET"
          fi

          LETTER=${LET:$OFFSET:1}
          if [[ "$VERBOSITY" -eq 2 ]]; then
            print "Checking letter $j: \$LETTER is $LETTER"
          fi

          COUNT=$( grep -o $LETTER <<<${GUESS[$i]} | wc -l )
          COUNT=${COUNT// }
          if [[ "$VERBOSITY" -eq 2 ]]; then
            print "Letter $LETTER appears in ${GUESS[$i]} $COUNT times"
          fi

          if [[ "$COUNT" -eq 0 ]]; then
            print "Invalid entry. Letter $LETTER does not appear in ${GUESS[$i]}"
            print "Try again"
            INVALID=1

          else
            if [[ "$VERBOSITY" -eq 2 ]]; then
              print "$LETTER is valid"
            fi

          fi

        done
        # End of loop through partially matching letters

        # Check if invalid flag was set
        if [[ $INVALID -eq 1 ]]; then
          print "Invalid letter in $LET. Try again"
          print
          VALID=0

        else
          VALID=1
          if [[ "$VERBOSITY" -eq 2 ]]; then
            print "Letters $LET are all valid"
          fi

        fi

      fi

    else
      print "Invalid entry. Try again."

    fi

  # Finished validating entry
  done

  # Trap blank entry
  if [[ "${#LET}" -eq 0 ]]; then
    print "No partially letters entered"
    return
  fi

  # Process any letters
  if [[ "$VERBOSITY" -ge 1 ]]; then
    print "That means the letter(s) $LET matched but not in the correct position."
  fi

  # Now, loop through letters to exclude words where letter is in wrong position

  # Find string length of $LET
  LEN="${#LET}"
  if [[ "$VERBOSITY" -eq 2 ]]; then
    print "Number of letters imperfectly matched is $LEN"
  fi
  print

  # Loop through letters in $LET
  for k in {1..$LEN}; do
    OFFSET=$(( $k-1 ))
    if [[ "$VERBOSITY" -eq 2 ]]; then
      print "\$OFFSET is $OFFSET"
    fi

    CHOICE=${LET:$OFFSET:1}
    if [[ "$VERBOSITY" -ge 1 ]]; then
      print "Now solving for $CHOICE:"
    fi

    # First find all the words which contain $CHOICE in any position
    grep --regexp="[$CHOICE]" list.tmp > list_$i.txt

    # Tabulate and display results
    PREV=$(wc -l < list.tmp)
    PREV=${PREV// }
    if [[ "$VERBOSITY" -ge 1 ]]; then
      CNT=$(wc -l < list_$i.txt)
      CNT=${CNT// }
      DISCARD=$(( $PREV-$CNT ))
      print "Preliminary selection of remaining words containing $CHOICE:"
      print "$DISCARD further words eliminated; $CNT words remaining."
    fi

    # Update list.tmp
    cat list_$i.txt > list.tmp

    # Determine count of CHOICE occurences in GUESS
    COUNT=$( grep -o $CHOICE <<<${GUESS[$i]} | wc -l )
    COUNT=${COUNT// }
    if [[ "$VERBOSITY" -eq 2 ]]; then
      print "Letter $CHOICE appears in ${GUESS[$i]} $COUNT times"
    fi 

    # Now, find the positions of the occurrence(s) of $CHOICE
    # Loop through letters in guess to find matches of CHOICE
    for l in {1..5}; do  #outer do loop
    if [[ "$VERBOSITY" -eq 2 ]]; then
      print "Letter $l: ${GUESS[$i][$l]}"
    fi

    if [[ ${GUESS[$i][$l]} = $CHOICE ]]; then  # if loop through letters in GUESS
      if [[ "$VERBOSITY" -eq 2 ]]; then
        print "$CHOICE is found in position $l of guess"
      fi

      if [[ "$VERBOSITY" -ge 1 ]]; then
        print "Finding words with $CHOICE NOT in position $l:"
      fi

      # Check if $CHOICE is already in $ANSWER in that position
      if [[ "$VERBOSITY" -eq 2 ]]; then
        print "Letter in position $l of ANSWER is ${ANSWER[$l]}"
      fi
      if [[ $ANSWER[$l] = $CHOICE ]]; then
        # If so, alert, do not change $ANSWER, and move to next occurrence of $MATCH
        if [[ "$VERBOSITY" -ge 1 ]]; then
          print "$CHOICE is already assigned to this position in \$ANSWER"
          print "No change to \$ANSWER"
        fi
        print

      # Check if only one occurrence of CHOICE in GUESS
      elif [[ $COUNT -eq 1 ]]; then
        if [[ "$VERBOSITY" -eq 2 ]]; then
          print "Letter $CHOICE appears in ${GUESS[i]} only once"
        fi

        # Set up a template based on current $ANSWER for regex
        INDEX=$(($l-1))
        if [[ "$VERBOSITY" -eq 2 ]]; then
          print "\$INDEX is $INDEX"
        fi

        PATTERN="${ANSWER:0:$INDEX}"[^"$CHOICE"]"${ANSWER:$(( $INDEX+1 ))}"
        if [[ "$VERBOSITY" -eq 2 ]]; then
          print "\$PATTERN is $PATTERN"
        fi

        # Now select only those words which match pattern
        grep --regexp="$PATTERN" list.tmp > list_$i.txt

        # Check for grep errors
        if [[ $? -ne "0" ]]; then
          print "Error in grep."
          print "Likely there were no matches to the pattern."
          print "PATTERN might be in error."
          print "Exiting."
          exit 9
        fi

      else
        print -n "Is this occurrence of $CHOICE a partial match (yellow square)? (y/n)"
        read -r RESP
        if [[ "$RESP" = "y" ]]; then
          # If so, add letter to template and exclude words

          # Set up a template based on current $ANSWER for regex
          INDEX=$(($l-1))
          if [[ "$VERBOSITY" -eq 2 ]]; then
            print "\$INDEX is $INDEX"
          fi

          PATTERN="${ANSWER:0:$INDEX}"[^"$CHOICE"]"${ANSWER:$(( $INDEX+1 ))}"
          if [[ "$VERBOSITY" -eq 2 ]]; then
            print "\$PATTERN is $PATTERN"
          fi

          # Now select only those words which match pattern
          grep --regexp="$PATTERN" list.tmp > list_$i.txt

          # Check for grep errors
          if [[ $? -ne "0" ]]; then 
            print "Error in grep."
            print "Likely there were no matches to the pattern."
            print "Exiting."
            exit 9
          fi

        elif [[ "$RESP" = "n" ]]; then
                  print "Not an exact or partial match - will deal with in part 3"
                  print
        else
          print "Error - incorrect input. Exiting"
          exit 4
        fi

      fi

    fi  # End of if loop through letters in GUESS

    done  # End of outer do loop through letters in guess to find matches

    # Tabulate and display results
    PREV=$(wc -l < list.tmp)
    PREV=${PREV// }
    CNT=$(wc -l < list_$i.txt)
    CNT=${CNT// }
    DISCARD=$(( $PREV-$CNT ))
    if [[ "$VERBOSITY" -eq 0 ]]; then
      print -n "After solving for $CHOICE, "
    fi
    print "$DISCARD further words eliminated; $CNT words remaining."
    if [[ "$VERBOSITY" -eq 2 ]]; then
      print -n "See list of remaining words? (y/n)"
      read -r RESP9
      if [[ "$RESP9" = "y" ]]; then
        cat list_$i.txt
      fi
    fi

    # Update list.tmp before next step
    cat list_$i.txt > list.tmp

    # If there is only one word remaining
    if [[ "$CNT" -eq 1 ]]; then
      print
      print "Wordle is solved. The answer is:"
      print
      ANSWER=$( cat list_$i.txt )
      print $ANSWER
      print

      print -n "Update unused_wordle_answers.txt? (y/n)"
      read -r RESP10
      if [[ "$RESP10" = "y" ]]; then
	. ./update_unused_wordle_answers.dev
      fi
      exit 0
    fi

    print

  # Finished looping through $LET
  done

  # Tabulate and display results
  if [[ "$VERBOSITY" -ge 1 ]]; then
    CNT=$(wc -l < list_$i.txt)
    CNT=${CNT// }
    DISCARD=$(( $PART2-$CNT ))
    print "Result of Part 2: $PART2 initial words, $DISCARD words eliminated, $CNT words remaining."
    if [[ "$VERBOSITY" -eq 2 ]]; then
      print -n "See list of remaining words? (y/n)"
      read -r RESP9
      if [[ "$RESP9" = "y" ]]; then
        cat list_$i.txt
      fi
    fi
  fi

  if [[ "$VERBOSITY" -eq 2 ]]; then
    print "Returning execution to wordle_solver.master.dev"
  fi

  return

